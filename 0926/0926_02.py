# -*- coding: utf-8 -*-
"""0926-02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mp2_cuCYqeYGAAjBP8cIA4nDET9z7Ej4
"""

import numpy as np

d_array = np.array([[2,5],
                    [1,3]])
print(d_array)

d_array_det = np.linalg.det(d_array)   #d_array 행렬의 determinant 연산
print(d_array_det) #determinant 연산 결과 출력

"""역행렬 구하기"""

import numpy as np

d_array_inv = np.linalg.inv(d_array)
print(d_array_inv)

"""단위행렬"""

#대각 행렬 만드는 함수 EYE
print(np.eye(3))

print(np.transpose(d_array))
print(d_array.transpose())
print(d_array.T)

"""대각행렬"""

x = np.arange(9).reshape(3,3)
print(x)

np.diag(x)

np.diag(np.diag(x))

"""내적"""

a = np.arange(4).reshape(2,2)
print(a)

#행렬 원소의 곱
print(a * a)

"""대각합"""

b = np.arange(16).reshape(4,4)
print(b)

np.trace(b)

d_array_inv = np.linalg.inv(d_array)
print(d_array_inv)

d_array = np.array([[2,5],[1,3]])  #numpy.array 를 사용하여 2x2 행렬 생성
print(np.transpose(d_array))
print(d_array.transpose())

#eye 대각행렬 만드는것이다
#

"""대각 행렬"""

import numpy as np
x = np.arange(9).reshape(3, 3)
print(x)
[[0,1,2],[3,4,5],[6,7,8]]

np.diag(x)
array([0,4,8])

np.diag(np.diag(x))
array([[0, 0, 0],[0, 4, 0],[0, 0, 8]])

"""내적"""



np.dot(a,a) #행렬의 내적

"""대각 합"""

b = np.arange(16).reshape(4,4)

print(b)

np.trace(b)

"""행렬 연립 방정식"""

a = np.array([[4, 3], [3, 2]])

b = np.array([23, 16])
x = np.linalg.solve(a, b)

print(x)

"""최소 자승법"""



"""하이라이터"""